# Aryan Singhal
# July 27, 2023
# Third Assignment

# ***************************************************************************************
# Part 1 - OOP

print("\nPart 1 - OOP")
print("\n")


class Refrigerator:

  # Constructor
  def __init__(self, model, capacity):
    self.model = model  # Model of refrigerator
    self.capacity = capacity  # Capacity of refrigerator in cubic feet
    self.temperature = 36  # Default desired temperature in Fahrenheit

  # Sets desired temperature of the refrigerator
  def set_temperature(self, temperature):
    print(
      f"Setting the desired temperature of your refrigerator as {temperature}°F"
    )
    if temperature >= 35 and temperature <= 38:
      self.temperature = temperature
    elif temperature > 38:
      print("Too hot! Please pick an ideal temperature between 35°F and 38°F")
    else:
      print("Too cold! Please pick an ideal temperature between 35°F and 38°F")

  # Prints specific details of the refrigerator
  def refrigerator_details(self):
    print(f"Refrigerator Model: {self.model}")
    print(f"Capacity: {self.capacity} cubic feet")
    print(f"Desired Temperature: {self.temperature}°F")


# Information regarding the properties and methods for Refrigerator class
print(
  "Information regarding the properties and methods of the Refrigerator class:\n"
)
print(
  "The properties of the Refrigerator class are the model of the refrigerator (model), the capacity of the refrigerator in cubic feet (capacity), and the desired temperature setting of the refrigerator in Fahrenheit that defaults to 36 degrees (temperature)."
)
print(
  "\nThe Refrigerator class has two methods. The first method, set_temperature(), allows setting a desired temperature of the refrigerator. The temperature is set only if the argument passed is between 35 degrees to 38 degrees. The second method, refrigerator_details(), prints the properties of the refrigerator, which are the refrigerator's model, capacity, and desired temperature setting.\n"
)

# Test the Refrigerator class
print("\nTesting the Refrigerator class:")
print("Test 1:")
# Create instance of Refrigerator class
fridge = Refrigerator("Kitchen Aid", 14)
fridge.refrigerator_details()  # Print current refrigerator details
fridge.set_temperature(38)  # Set the temperature of refrigerator
fridge.refrigerator_details()
print("\n")

print("Test 2:")
# Create instance of Refrigerator class
fridge2 = Refrigerator("Whirlpool", 18)
fridge2.refrigerator_details()
# Set the desired temperature of refrigerator. Should be invalid.
fridge2.set_temperature(40)
# Set the desired temperature of refrigerator. Should be invalid.
fridge2.set_temperature(-3)
fridge2.refrigerator_details()
print("\n")

# ***************************************************************************************
# Part 2 - LIST

print("Part 2 - LIST")
print("\n")

# (1)
print("(1)", end="")
sports_list = []  # Initialize an empty list to store sports

# Use while loop to iteratively ask the user to input names of new sports and add them to sports_list.
while len(sports_list) < 5:
  sport = input(
    f"\nPlease enter the name of a new sport. Current list of sports: {sports_list}:\n"
  )
  sports_list.append(sport)

print("\n\nThe final list of 5 sports generated by you: ", sports_list)
print("\n")

# (2)
print("(2)")
# Add a 6th sport between the 3rd and 4th positions
print("Adding a 6th sport between the 3rd and 4th elements in the list")
sports_list.insert(3, "cricket")
# Print the 2nd to 5th sports
print("2nd to 5th sports:", sports_list[1:5])
print("\n")

# (3)
print("(3)")
# Add a 7th sport to the end of the list
print("Adding a 7th sport to the end of the list of sports")
sports_list.append("baseball")
# Print the last sport in the list
print("Last sport in the list:", sports_list[-1])
print("\n")

# (4)
print("(4)")
num_sports = len(sports_list)  # length of the list
max_sport = max(sports_list)  # maximum element in list
min_sport = min(sports_list)  # minimum element in list
print("Number of sports currently in the list:", num_sports)
print("Max value in the list:", max_sport)
print("Min value in the list:", min_sport)
print("\n")

# (5)
print("(5)")
sports_tuple = tuple(sports_list)  # Change datatype list to datatype tuple
print("Sports list as a tuple: ", sports_tuple)
print("\n")

# ***************************************************************************************
# Part 3 - TEXT FILE

print("Part 3 - TEXT FILE")
print("\n")

# (1)
print("(1)")

# Create and populate the sport.txt file with the initial 7 sports
handle = open("sport.txt", "w")
for sport in sports_list:
  handle.write(sport + "\n")
handle.close()

# Read and print the contents of the sport.txt file
handle = open("sport.txt", "r")
print("Contents of the sport.txt file after initial the population:")
print(handle.read())
handle.close()

# (2)
print("(2)")

# Using with statement, add three more sports to the sport.txt file
additional_sports = ["golf", "rugby", "hockey"]
with open("sport.txt", "a") as file:
  for sport in additional_sports:
    file.write(sport + "\n")

# Read and print the contents of the .txt file after adding three more sports
with open("sport.txt", "r") as file:
  content = file.read()
  print("Contents of the sport.txt file after adding three more sports:")
  print(content)

# Reading from the .txt file, print out the number of sports
with open("sport.txt", "r") as file:
  lines = file.readlines()
  num_sports = len(lines)
  print("Total number of sports in the sport.txt file:", num_sports)

# ***************************************************************************************
# Part 4 – DICTIONARY

print("\n\nPart 4 – DICTIONARY")
print("\n")

# Create a dictionary containing order numbers and the total amount of the order
order_amounts = {
  101: 250.23,
  102: 150.12,
  103: 500.39,
  104: 1000.55,
  105: 750.94,
}

# Create a dictionary containing order numbers and the names of the salesperson filling the order
salespersons = {
  101: "John",
  102: "Alice",
  103: "Bob",
  104: "Emma",
  105: "Michael",
}

# Create a dictionary containing order numbers and # of items ordered for the particular order
order_items = {
  101: 5,
  102: 2,
  103: 10,
  104: 8,
  105: 6,
}


# Function to get order details based on order number
def get_order_details(order_number):
  amount = order_amounts.get(order_number, "Entry not found")
  salesperson = salespersons.get(order_number, "Entry not found")
  items = order_items.get(order_number, "Entry not found")
  order_details = [amount, salesperson, items]
  return order_details


# Handle user input and display order details
valid_order = False
while not valid_order:  # Order entry by user automatically assumed to be valid
  order_number = input("Enter an order number (make sure it is an integer): ")
  order_number = int(order_number)
  if order_number in order_amounts:  # Check if the order number exists in the dictionary
    valid_order = True
    order_details = get_order_details(order_number)
    print(f"\nOrder found!\nOrder Number: {order_number}")
    print(f"Total Order Amount: ${order_details[0]}")
    print(f"Salesperson: {order_details[1]}")
    print(f"Number of Items: {order_details[2]}")
  else:
    print("\nOrder number not found. Please enter a correct order number.")

# ***************************************************************************************
# Part 5 – SET

print("\n\nPart 5 – SET")
print("\n")

# Create a set called sportset with elements of four sports
sportset = {"soccer", "hockey", "badminton", "volleyball"}
print("Set of sports:", sportset)

# Print the number of elements in sportset
num_elements = len(sportset)
print("Number of elements in the set of sports:", num_elements)

# Use a method to add the letters of favorite color to sportset
favorite_color_letters = set("red")
sportset.update(favorite_color_letters)
print("Set of sports after adding the letters of 'red':", sportset)

print("Attempting to remove 'v' from set of sports...")
sportset.remove('v')

print("The set of sports after removing 'v' (if it exists):")
print(sportset)
